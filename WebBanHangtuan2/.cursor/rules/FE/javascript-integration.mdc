---
description:
globs:
alwaysApply: false
---
# JavaScript Integration

This application uses vanilla JavaScript with Bootstrap's JavaScript library and select plugins for enhanced functionality.

## JavaScript Libraries
- **Bootstrap 5 JS**: Core JavaScript for Bootstrap components (dropdowns, modals, etc.)
- **jQuery**: Used for compatibility with certain plugins
- **Glide.js**: For carousel functionality
- **Fancybox**: For image gallery and lightbox functionality

## Script Loading
JavaScript files are loaded at the end of the page via the footer component [footer.php](mdc:app/views/shares/footer.php):

```html
<!-- Bootstrap 5 JS Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<!-- jQuery (for compatibility with older plugins if needed) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<!-- Additional libraries -->
```

## JavaScript Patterns

### DOM Content Loading
JavaScript initialization is wrapped in DOMContentLoaded event listeners:

```javascript
document.addEventListener("DOMContentLoaded", function() {
    // Initialize components after DOM is fully loaded
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function(tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
});
```

### Lazy Loading
Implemented for images to improve performance:

```javascript
var lazyImages = [].slice.call(document.querySelectorAll("img.lazy"));
if ("IntersectionObserver" in window) {
    let lazyImageObserver = new IntersectionObserver(function(entries, observer) {
        entries.forEach(function(entry) {
            if (entry.isIntersecting) {
                let lazyImage = entry.target;
                lazyImage.src = lazyImage.dataset.src;
                lazyImage.classList.remove("lazy");
                lazyImageObserver.unobserve(lazyImage);
            }
        });
    });

    lazyImages.forEach(function(lazyImage) {
        lazyImageObserver.observe(lazyImage);
    });
}
```
